        -:    0:Source:C:/Users/DELL/CLionProjects/CLionTest/main.cpp
        -:    0:Graph:C:\Users\DELL\CLionProjects\CLionTest\cmake-build-debug-coverage\CMakeFiles\CLionTest.dir\main.cpp.gcno
        -:    0:Data:C:\Users\DELL\CLionProjects\CLionTest\cmake-build-debug-coverage\CMakeFiles\CLionTest.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <vector>
        -:    2:#include <thread>
        -:    3:#include <future>
        -:    4:#include <numeric>
        -:    5:#include <iostream>
        -:    6:#include <chrono>
        -:    7:
function _Z10accumulateN9__gnu_cxx17__normal_iteratorIPiSt6vectorIiSaIiEEEES5_St7promiseIiE called 1 returned 100% blocks executed 100%
        1:    8:void accumulate(std::vector<int>::iterator first,
        -:    9:                std::vector<int>::iterator last,
        -:   10:                std::promise<int> accumulate_promise)
        -:   11:{
        1:   12:    int sum = std::accumulate(first, last, 0);
        1:   12-block  0
call    0 returned 1
        1:   13:    accumulate_promise.set_value(sum);  // Notify future
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   14:}
        1:   14-block  0
        -:   15:
function _Z7do_workSt7promiseIvE called 1 returned 100% blocks executed 83%
        1:   16:void do_work(std::promise<void> barrier)
        -:   17:{
        1:   18:    std::this_thread::sleep_for(std::chrono::seconds(1));
        1:   18-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
    $$$$$:   18-block  1
        1:   19:    barrier.set_value();
        1:   19-block  0
call    0 returned 1
        1:   20:}
function main called 1 returned 100% blocks executed 57%
        1:   21:int main()
        -:   22:{
        -:   23:    // Demonstrate using promise<int> to transmit a result between threads.
        2:   24:    std::vector<int> numbers = { 1, 2, 3, 4, 5, 6 };
        1:   24-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
    $$$$$:   24-block  1
    $$$$$:   24-block  2
    $$$$$:   24-block  3
call    5 never executed
        2:   25:    std::promise<int> accumulate_promise;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   25-block  0
call    4 never executed
        2:   26:    std::future<int> accumulate_future = accumulate_promise.get_future();
        1:   26-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   26-block  1
call    4 never executed
        1:   27:    std::thread work_thread(accumulate, numbers.begin(), numbers.end(),
call    0 returned 1
call    1 returned 1
    $$$$$:   27-block  0
    $$$$$:   27-block  1
        3:   28:                            std::move(accumulate_promise));
        1:   28-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 1
    $$$$$:   28-block  1
call    5 never executed
        -:   29:
        -:   30:    // future::get() will wait until the future has a valid result and retrieves it.
        -:   31:    // Calling wait() before get() is not needed
        -:   32:    //accumulate_future.wait();  // wait for result
        1:   33:    std::cout << "result=" << accumulate_future.get() << '\n';
        1:   33-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   33-block  1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:   33-block  2
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
        1:   33-block  3
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
        1:   34:    work_thread.join();  // wait for thread completion
        1:   34-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   35:
        -:   36:    // Demonstrate using promise<void> to signal state between threads.
        2:   37:    std::promise<void> barrier;
        1:   37-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   37-block  1
call    4 never executed
        2:   38:    std::future<void> barrier_future = barrier.get_future();
        1:   38-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
    $$$$$:   38-block  1
call    4 never executed
        2:   39:    std::thread new_work_thread(do_work, std::move(barrier));
        1:   39-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   39-block  1
call    4 returned 1
    $$$$$:   39-block  2
call    5 never executed
        1:   40:    barrier_future.wait();
        1:   40-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   41:    new_work_thread.join();
        1:   41-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   42:}
        1:   42-block  0
